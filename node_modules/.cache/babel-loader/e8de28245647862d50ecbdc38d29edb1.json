{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\nt\\\\companies\\\\src\\\\App.js\";\nimport React, { Component } from 'react'; //import { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport PropTypes from 'prop-types'; //import { createBrowserHistory } from 'history';\n\nimport { ReactDadata } from 'react-dadata';\nimport { Button, ButtonToolbar } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { createCompanies } from './actions/companies';\n\nclass App extends Component {\n  componentWillMount() {\n    this.props.fetchData(\"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/party\", {\n      method: 'POST',\n      mode: 'cors',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': 'Token 6692478bebb2ef311e5137c8a7f03b26f98aeb72'\n      },\n      body: JSON.stringify({\n        query: 'сбербанк'\n      })\n    });\n  }\n\n  render() {\n    console.log(this.props);\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, this.props.companies.map(company => React.createElement(\"div\", {\n      key: company.data.inn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, company.value)), React.createElement(ReactDadata, {\n      token: \"6692478bebb2ef311e5137c8a7f03b26f98aeb72\",\n      query: \"\\u041C\\u043E\\u0441\\u043A\\u0432\\u0430\",\n      placeholder: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"\\u043A\\u043D\\u043E\\u043F\\u043A\\u0430\"), React.createElement(ButtonToolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Primary\"), React.createElement(Button, {\n      variant: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Secondary\"), React.createElement(Button, {\n      variant: \"success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Success\"), React.createElement(Button, {\n      variant: \"warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Warning\"), React.createElement(Button, {\n      variant: \"danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Danger\"), React.createElement(Button, {\n      variant: \"info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Info\"), React.createElement(Button, {\n      variant: \"light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Light\"), React.createElement(Button, {\n      variant: \"dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Dark\"), React.createElement(Button, {\n      variant: \"link\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Link\"))); //const history = createBrowserHistory();\n\n    /*return (      \r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <div className=\"container\" >\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <UserList {...this.props} />\r\n            </Route>\r\n            <Route path=\"/users/:userId\" history={history}>\r\n              <Profile {...this.props} />\r\n            </Route>\r\n          </Switch>\r\n          <Slider {...this.props} />      \r\n        </div>\r\n      </BrowserRouter>\r\n    )*/\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    error: state.error,\n    loading: state.loading,\n    companies: state.companies\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchData: (url, params) => dispatch(createCompanies(url, params))\n  };\n};\n\nApp.propTypes = {\n  children: PropTypes.node\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["C:\\projects\\nt\\companies\\src\\App.js"],"names":["React","Component","PropTypes","ReactDadata","Button","ButtonToolbar","connect","createCompanies","App","componentWillMount","props","fetchData","method","mode","credentials","headers","body","JSON","stringify","query","render","console","log","companies","map","company","data","inn","value","mapStateToProps","state","error","loading","mapDispatchToProps","dispatch","url","params","propTypes","children","node"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\n//import { createBrowserHistory } from 'history';\r\n\r\nimport { ReactDadata } from 'react-dadata';\r\nimport { Button,  ButtonToolbar } from 'react-bootstrap';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { createCompanies } from './actions/companies';\r\n\r\nclass App extends Component {\r\n\r\n  componentWillMount() {\r\n    this.props.fetchData(\"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/party\", {\r\n      method: 'POST',\r\n      mode: 'cors',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        'Authorization': 'Token 6692478bebb2ef311e5137c8a7f03b26f98aeb72'\r\n      },\r\n      body: JSON.stringify({\r\n        query: 'сбербанк'\r\n      })\r\n    })\r\n  }  \r\n\r\n  render() {\r\n    console.log(this.props)\r\n    return (\r\n      <div className=\"wrapper\">\r\n        {this.props.companies.map(\r\n          company =>\r\n          <div key={company.data.inn}>{company.value}</div>\r\n        )}\r\n        <ReactDadata token=\"6692478bebb2ef311e5137c8a7f03b26f98aeb72\" query=\"Москва\" placeholder=\"\" />\r\n        <Button>кнопка</Button>        \r\n        <ButtonToolbar>\r\n          <Button variant=\"primary\">Primary</Button>\r\n          <Button variant=\"secondary\">Secondary</Button>\r\n          <Button variant=\"success\">Success</Button>\r\n          <Button variant=\"warning\">Warning</Button>\r\n          <Button variant=\"danger\">Danger</Button>\r\n          <Button variant=\"info\">Info</Button>\r\n          <Button variant=\"light\">Light</Button>\r\n          <Button variant=\"dark\">Dark</Button>\r\n          <Button variant=\"link\">Link</Button>\r\n        </ButtonToolbar>\r\n      </div>      \r\n    )\r\n    //const history = createBrowserHistory();\r\n    /*return (      \r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <div className=\"container\" >\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <UserList {...this.props} />\r\n            </Route>\r\n            <Route path=\"/users/:userId\" history={history}>\r\n              <Profile {...this.props} />\r\n            </Route>\r\n          </Switch>\r\n          <Slider {...this.props} />      \r\n        </div>\r\n      </BrowserRouter>\r\n    )*/\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      error: state.error,\r\n      loading: state.loading,\r\n      companies: state.companies\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchData: (url, params) => dispatch(createCompanies(url, params))\r\n  };\r\n};\r\n\r\nApp.propTypes = {\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n"]},"metadata":{},"sourceType":"module"}