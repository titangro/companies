{"ast":null,"code":"import initialState from '../constants/initialState';\nimport * as types from '../constants/types';\nexport function companies(state = initialState.companies, action) {\n  switch (action.type) {\n    case types.companies.CREATE:\n      {\n        const companies = action.companies;\n        let nextState = companies.suggestions;\n        return nextState;\n      }\n\n    default:\n      return state;\n  }\n}\nexport function company(state = initialState.company, action) {\n  switch (action.type) {\n    case types.companies.ACTIVATE:\n      {\n        const company = action.company;\n        let nextState = company;\n        return nextState;\n      }\n\n    default:\n      return state;\n  }\n}\nexport function managers(state = initialState.managers, action) {\n  switch (action.type) {\n    case types.companies.SHOW_MANAGERS:\n      {\n        const company = action.company;\n        let nextState = company.data.managers ? company.data.managers : [];\n        console.log(nextState);\n        let parsedManagers = localStorage.managers ? JSON.parse(localStorage.managers) : [];\n        nextState = [...nextState, ...parsedManagers[company.data.hid]];\n        return nextState;\n      }\n\n    case types.companies.ADD_MANAGER:\n      {\n        const manager = action.manager,\n              companyId = action.companyId;\n\n        if (!localStorage.managers) {\n          let companyManager = {};\n          companyManager[companyId] = [manager];\n          localStorage.managers = JSON.stringify(companyManager);\n        } else {\n          let managers = JSON.parse(localStorage.managers);\n          managers[companyId] = [...managers[companyId], manager];\n          localStorage.managers = JSON.stringify(managers);\n        }\n\n        let nextState = [...state, manager];\n        return nextState;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:\\projects\\nt\\companies\\src\\reducers\\companies.js"],"names":["initialState","types","companies","state","action","type","CREATE","nextState","suggestions","company","ACTIVATE","managers","SHOW_MANAGERS","data","console","log","parsedManagers","localStorage","JSON","parse","hid","ADD_MANAGER","manager","companyId","companyManager","stringify"],"mappings":"AACA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,oBAAvB;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAK,GAAGH,YAAY,CAACE,SAAxC,EAAmDE,MAAnD,EAA2D;AAC9D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,KAAK,CAACC,SAAN,CAAgBI,MAArB;AAA6B;AAAA,cACjBJ,SADiB,GACHE,MADG,CACjBF,SADiB;AAEzB,YAAIK,SAAS,GAAGL,SAAS,CAACM,WAA1B;AACA,eAAOD,SAAP;AACH;;AACD;AACI,aAAOJ,KAAP;AAPR;AASH;AAED,OAAO,SAASM,OAAT,CAAiBN,KAAK,GAAGH,YAAY,CAACS,OAAtC,EAA+CL,MAA/C,EAAuD;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,KAAK,CAACC,SAAN,CAAgBQ,QAArB;AAA+B;AAAA,cACnBD,OADmB,GACPL,MADO,CACnBK,OADmB;AAE3B,YAAIF,SAAS,GAAGE,OAAhB;AACA,eAAOF,SAAP;AACH;;AACD;AACI,aAAOJ,KAAP;AAPR;AASH;AAED,OAAO,SAASQ,QAAT,CAAkBR,KAAK,GAAGH,YAAY,CAACW,QAAvC,EAAiDP,MAAjD,EAAyD;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,KAAK,CAACC,SAAN,CAAgBU,aAArB;AAAoC;AAAA,cACxBH,OADwB,GACZL,MADY,CACxBK,OADwB;AAEhC,YAAIF,SAAS,GAAGE,OAAO,CAACI,IAAR,CAAaF,QAAb,GAAwBF,OAAO,CAACI,IAAR,CAAaF,QAArC,GAAgD,EAAhE;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYR,SAAZ;AACA,YAAIS,cAAc,GAAGC,YAAY,CAACN,QAAb,GAAwBO,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACN,QAAxB,CAAxB,GAA4D,EAAjF;AACAJ,QAAAA,SAAS,GAAG,CAAC,GAAGA,SAAJ,EAAe,GAAGS,cAAc,CAACP,OAAO,CAACI,IAAR,CAAaO,GAAd,CAAhC,CAAZ;AACA,eAAOb,SAAP;AACH;;AACD,SAAKN,KAAK,CAACC,SAAN,CAAgBmB,WAArB;AAAkC;AAAA,cACtBC,OADsB,GACClB,MADD,CACtBkB,OADsB;AAAA,cACbC,SADa,GACCnB,MADD,CACbmB,SADa;;AAE9B,YAAI,CAACN,YAAY,CAACN,QAAlB,EAA4B;AACxB,cAAIa,cAAc,GAAG,EAArB;AACAA,UAAAA,cAAc,CAACD,SAAD,CAAd,GAA4B,CAACD,OAAD,CAA5B;AACAL,UAAAA,YAAY,CAACN,QAAb,GAAwBO,IAAI,CAACO,SAAL,CAAeD,cAAf,CAAxB;AACH,SAJD,MAIO;AACH,cAAIb,QAAQ,GAAGO,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACN,QAAxB,CAAf;AACAA,UAAAA,QAAQ,CAACY,SAAD,CAAR,GAAsB,CAAC,GAAGZ,QAAQ,CAACY,SAAD,CAAZ,EAAyBD,OAAzB,CAAtB;AACAL,UAAAA,YAAY,CAACN,QAAb,GAAwBO,IAAI,CAACO,SAAL,CAAed,QAAf,CAAxB;AACH;;AACD,YAAIJ,SAAS,GAAG,CAAC,GAAGJ,KAAJ,EAAWmB,OAAX,CAAhB;AACA,eAAOf,SAAP;AACH;;AACD;AACI,aAAOJ,KAAP;AAxBR;AA0BH","sourcesContent":["\r\nimport initialState from '../constants/initialState';\r\nimport * as types from '../constants/types';\r\n\r\nexport function companies(state = initialState.companies, action) {\r\n    switch (action.type) {\r\n        case types.companies.CREATE: {\r\n            const { companies } = action;\r\n            let nextState = companies.suggestions;\r\n            return nextState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport function company(state = initialState.company, action) {\r\n    switch (action.type) {\r\n        case types.companies.ACTIVATE: {\r\n            const { company } = action;\r\n            let nextState = company;\r\n            return nextState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport function managers(state = initialState.managers, action) {\r\n    switch (action.type) {\r\n        case types.companies.SHOW_MANAGERS: {\r\n            const { company } = action;\r\n            let nextState = company.data.managers ? company.data.managers : [];\r\n            console.log(nextState)\r\n            let parsedManagers = localStorage.managers ? JSON.parse(localStorage.managers) : [];\r\n            nextState = [...nextState, ...parsedManagers[company.data.hid]];\r\n            return nextState;\r\n        }\r\n        case types.companies.ADD_MANAGER: {\r\n            const { manager, companyId } = action;\r\n            if (!localStorage.managers) {\r\n                let companyManager = {};\r\n                companyManager[companyId] = [manager];\r\n                localStorage.managers = JSON.stringify(companyManager);\r\n            } else {\r\n                let managers = JSON.parse(localStorage.managers);\r\n                managers[companyId] = [...managers[companyId], manager];\r\n                localStorage.managers = JSON.stringify(managers);\r\n            }\r\n            let nextState = [...state, manager];\r\n            return nextState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}