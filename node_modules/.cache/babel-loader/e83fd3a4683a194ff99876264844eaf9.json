{"ast":null,"code":"import initialState from '../constants/initialState';\nimport * as types from '../constants/types';\nexport function companies(state = initialState.companies, action) {\n  switch (action.type) {\n    case types.companies.CREATE:\n      {\n        const companies = action.companies;\n        let nextState = companies.suggestions;\n        return nextState;\n      }\n\n    default:\n      return state;\n  }\n}\nexport function company(state = initialState.company, action) {\n  switch (action.type) {\n    case types.companies.ACTIVATE:\n      {\n        const company = action.company;\n        let nextState = company;\n        return nextState;\n      }\n\n    default:\n      return state;\n  }\n}\nexport function managers(state = initialState.managers, action) {\n  switch (action.type) {\n    case types.companies.SHOW_MANAGERS:\n      {\n        const company = action.company;\n        console.log(company);\n        let nextState = managers;\n        return nextState;\n      }\n\n    case types.companies.ADD_MANAGER:\n      {\n        const manager = action.manager,\n              companyId = action.companyId;\n\n        if (localStorage.managers) {\n          localStorage.managers[companyId] = JSON.stringify([manager]);\n        } else {\n          localStorage.managers = JSON.stringify([...JSON.parse(localStorage.managers)[companyId], manager]);\n        }\n\n        let nextState = [...state, manager];\n        return nextState;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:\\projects\\nt\\companies\\src\\reducers\\companies.js"],"names":["initialState","types","companies","state","action","type","CREATE","nextState","suggestions","company","ACTIVATE","managers","SHOW_MANAGERS","console","log","ADD_MANAGER","manager","companyId","localStorage","JSON","stringify","parse"],"mappings":"AACA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,oBAAvB;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAK,GAAGH,YAAY,CAACE,SAAxC,EAAmDE,MAAnD,EAA2D;AAC9D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,KAAK,CAACC,SAAN,CAAgBI,MAArB;AAA6B;AAAA,cACjBJ,SADiB,GACHE,MADG,CACjBF,SADiB;AAEzB,YAAIK,SAAS,GAAGL,SAAS,CAACM,WAA1B;AACA,eAAOD,SAAP;AACH;;AACD;AACI,aAAOJ,KAAP;AAPR;AASH;AAED,OAAO,SAASM,OAAT,CAAiBN,KAAK,GAAGH,YAAY,CAACS,OAAtC,EAA+CL,MAA/C,EAAuD;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,KAAK,CAACC,SAAN,CAAgBQ,QAArB;AAA+B;AAAA,cACnBD,OADmB,GACPL,MADO,CACnBK,OADmB;AAE3B,YAAIF,SAAS,GAAGE,OAAhB;AACA,eAAOF,SAAP;AACH;;AACD;AACI,aAAOJ,KAAP;AAPR;AASH;AAED,OAAO,SAASQ,QAAT,CAAkBR,KAAK,GAAGH,YAAY,CAACW,QAAvC,EAAiDP,MAAjD,EAAyD;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,KAAK,CAACC,SAAN,CAAgBU,aAArB;AAAoC;AAAA,cACxBH,OADwB,GACZL,MADY,CACxBK,OADwB;AAEhCI,QAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACA,YAAIF,SAAS,GAAGI,QAAhB;AACA,eAAOJ,SAAP;AACH;;AACD,SAAKN,KAAK,CAACC,SAAN,CAAgBa,WAArB;AAAkC;AAAA,cACtBC,OADsB,GACCZ,MADD,CACtBY,OADsB;AAAA,cACbC,SADa,GACCb,MADD,CACba,SADa;;AAE9B,YAAIC,YAAY,CAACP,QAAjB,EAA2B;AACvBO,UAAAA,YAAY,CAACP,QAAb,CAAsBM,SAAtB,IAAmCE,IAAI,CAACC,SAAL,CAAe,CAACJ,OAAD,CAAf,CAAnC;AACH,SAFD,MAEO;AACHE,UAAAA,YAAY,CAACP,QAAb,GAAwBQ,IAAI,CAACC,SAAL,CAAe,CAAC,GAAGD,IAAI,CAACE,KAAL,CAAWH,YAAY,CAACP,QAAxB,EAAkCM,SAAlC,CAAJ,EAAkDD,OAAlD,CAAf,CAAxB;AACH;;AACD,YAAIT,SAAS,GAAG,CAAC,GAAGJ,KAAJ,EAAWa,OAAX,CAAhB;AACA,eAAOT,SAAP;AACH;;AACD;AACI,aAAOJ,KAAP;AAlBR;AAoBH","sourcesContent":["\r\nimport initialState from '../constants/initialState';\r\nimport * as types from '../constants/types';\r\n\r\nexport function companies(state = initialState.companies, action) {\r\n    switch (action.type) {\r\n        case types.companies.CREATE: {\r\n            const { companies } = action;\r\n            let nextState = companies.suggestions;\r\n            return nextState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport function company(state = initialState.company, action) {\r\n    switch (action.type) {\r\n        case types.companies.ACTIVATE: {\r\n            const { company } = action;\r\n            let nextState = company;\r\n            return nextState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport function managers(state = initialState.managers, action) {\r\n    switch (action.type) {\r\n        case types.companies.SHOW_MANAGERS: {\r\n            const { company } = action;\r\n            console.log(company)\r\n            let nextState = managers;\r\n            return nextState;\r\n        }\r\n        case types.companies.ADD_MANAGER: {\r\n            const { manager, companyId } = action;\r\n            if (localStorage.managers) {\r\n                localStorage.managers[companyId] = JSON.stringify([manager]);\r\n            } else {\r\n                localStorage.managers = JSON.stringify([...JSON.parse(localStorage.managers)[companyId], manager]);\r\n            }\r\n            let nextState = [...state, manager];\r\n            return nextState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}