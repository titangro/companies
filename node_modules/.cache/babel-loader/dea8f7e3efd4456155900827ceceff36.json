{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar Highlighter = require(\"react-highlight-words\");\n\nrequire(\"./react-dadata.css\");\n\nvar ReactDadata =\n/** @class */\nfunction (_super) {\n  __extends(ReactDadata, _super);\n\n  function ReactDadata(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.onInputFocus = function () {\n      _this.setState({\n        inputFocused: true\n      });\n\n      if (_this.state.suggestions.length == 0) {\n        _this.fetchSuggestions();\n      }\n    };\n\n    _this.onInputBlur = function () {\n      _this.setState({\n        inputFocused: false\n      });\n\n      if (_this.state.suggestions.length == 0) {\n        _this.fetchSuggestions();\n      }\n    };\n\n    _this.onInputChange = function (event) {\n      var value = event.target.value;\n\n      _this.setState({\n        query: value,\n        inputQuery: value,\n        suggestionsVisible: true\n      }, function () {\n        if (_this.props.validate) {\n          _this.props.validate(value);\n        }\n\n        _this.fetchSuggestions();\n      });\n    };\n\n    _this.onKeyPress = function (event) {\n      if (event.which == 40) {\n        // Arrow down\n        event.preventDefault();\n\n        if (_this.state.suggestionIndex < _this.state.suggestions.length) {\n          var newSuggestionIndex = _this.state.suggestionIndex + 1;\n          var newInputQuery = _this.state.suggestions[newSuggestionIndex].value;\n\n          _this.setState({\n            suggestionIndex: newSuggestionIndex,\n            query: newInputQuery\n          });\n        }\n      } else if (event.which == 38) {\n        // Arrow up\n        event.preventDefault();\n\n        if (_this.state.suggestionIndex >= 0) {\n          var newSuggestionIndex = _this.state.suggestionIndex - 1;\n          var newInputQuery = newSuggestionIndex == -1 ? _this.state.inputQuery : _this.state.suggestions[newSuggestionIndex].value;\n\n          _this.setState({\n            suggestionIndex: newSuggestionIndex,\n            query: newInputQuery\n          });\n        }\n      } else if (event.which == 13) {\n        // Enter\n        event.preventDefault();\n\n        if (_this.state.suggestionIndex >= 0) {\n          _this.selectSuggestion(_this.state.suggestionIndex);\n        }\n      }\n    };\n\n    _this.fetchSuggestions = function () {\n      if (_this.xhr) {\n        _this.xhr.abort();\n      }\n\n      _this.xhr = new XMLHttpRequest();\n\n      _this.xhr.open(\"POST\", \"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address?5\");\n\n      _this.xhr.setRequestHeader(\"Accept\", \"application/json\");\n\n      _this.xhr.setRequestHeader(\"Authorization\", \"Token \" + _this.props.token);\n\n      _this.xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n      var requestPayload = {\n        query: _this.state.query,\n        count: _this.props.count ? _this.props.count : 10\n      }; // Checking for granular suggestions\n\n      if (_this.props.fromBound && _this.props.toBound) {\n        // When using granular suggestion, all dadata components have to receive address property that contains shared address info.\n        if (!_this.props.address) {\n          throw new Error(\"You have to pass address property with DaData address object to connect separate components\");\n        }\n\n        requestPayload.from_bound = {\n          value: _this.props.fromBound\n        };\n        requestPayload.to_bound = {\n          value: _this.props.toBound\n        };\n        requestPayload.restrict_value = true;\n\n        if (_this.props.address.data) {\n          // Define location limitation\n          var location_1 = {};\n\n          if (_this.props.address.data.region_fias_id) {\n            location_1.region_fias_id = _this.props.address.data.region_fias_id;\n          }\n\n          if (_this.props.address.data.city_fias_id) {\n            location_1.city_fias_id = _this.props.address.data.city_fias_id;\n          }\n\n          if (_this.props.address.data.settlement_fias_id) {\n            location_1.settlement_fias_id = _this.props.address.data.settlement_fias_id;\n          }\n\n          if (_this.props.address.data.street_fias_id) {\n            location_1.street_fias_id = _this.props.address.data.street_fias_id;\n          }\n\n          requestPayload.locations = [location_1];\n        }\n      }\n\n      _this.xhr.send(JSON.stringify(requestPayload));\n\n      _this.xhr.onreadystatechange = function () {\n        if (!_this.xhr || _this.xhr.readyState != 4) {\n          return;\n        }\n\n        if (_this.xhr.status == 200) {\n          var responseJson = JSON.parse(_this.xhr.response);\n\n          if (responseJson && responseJson.suggestions) {\n            _this.setState({\n              suggestions: responseJson.suggestions,\n              suggestionIndex: -1\n            });\n          }\n        }\n      };\n    };\n\n    _this.onSuggestionClick = function (index, event) {\n      event.stopPropagation();\n\n      _this.selectSuggestion(index);\n    };\n\n    _this.selectSuggestion = function (index) {\n      if (_this.state.suggestions.length >= index - 1) {\n        _this.setState({\n          query: _this.state.suggestions[index].value,\n          suggestionsVisible: false,\n          inputQuery: _this.state.suggestions[index].value\n        }, function () {\n          _this.fetchSuggestions();\n\n          setTimeout(function () {\n            return _this.setCursorToEnd(_this.textInput);\n          }, 100);\n        });\n\n        if (_this.props.onChange) {\n          _this.props.onChange(_this.state.suggestions[index]);\n        }\n      }\n    };\n\n    _this.setCursorToEnd = function (element) {\n      var valueLength = element.value.length;\n\n      if (element.selectionStart || element.selectionStart == '0') {\n        // Firefox/Chrome\n        element.selectionStart = valueLength;\n        element.selectionEnd = valueLength;\n        element.focus();\n      }\n    };\n\n    _this.getHighlightWords = function () {\n      var wordsToPass = ['г', 'респ', 'ул', 'р-н', 'село', 'деревня', 'поселок', 'пр-д', 'пл', 'к', 'кв', 'обл', 'д'];\n\n      var words = _this.state.inputQuery.replace(',', '').split(' ');\n\n      words = words.filter(function (word) {\n        return wordsToPass.indexOf(word) < 0;\n      });\n      return words;\n    };\n\n    _this.state = {\n      query: _this.props.query ? _this.props.query : '',\n      inputQuery: _this.props.query ? _this.props.query : '',\n      inputFocused: false,\n      suggestions: [],\n      suggestionIndex: -1,\n      suggestionsVisible: true,\n      isValid: false\n    };\n    return _this;\n  }\n\n  ReactDadata.prototype.componentDidMount = function () {\n    if (this.props.autoload && this.state.query) {\n      this.fetchSuggestions();\n    }\n  };\n\n  ;\n\n  ReactDadata.prototype.render = function () {\n    var _this = this;\n\n    var classNames = ['react-dadata__input'];\n\n    if (this.props.className) {\n      classNames.push(this.props.className);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"react-dadata react-dadata__container\"\n    }, React.createElement(\"div\", null, React.createElement(\"input\", {\n      className: classNames.join(' '),\n      disabled: this.props.disabled,\n      placeholder: this.props.placeholder ? this.props.placeholder : '',\n      value: this.state.query,\n      ref: function (input) {\n        _this.textInput = input;\n      },\n      onChange: this.onInputChange,\n      onKeyPress: this.onKeyPress,\n      onKeyDown: this.onKeyPress,\n      onFocus: this.onInputFocus,\n      onBlur: this.onInputBlur,\n      validate: this.props.validate,\n      autoComplete: this.props.autocomplete ? this.props.autocomplete : 'off'\n    })), this.state.inputFocused && this.state.suggestionsVisible && this.state.suggestions && this.state.suggestions.length > 0 && React.createElement(\"div\", {\n      className: \"react-dadata__suggestions\"\n    }, React.createElement(\"div\", {\n      className: \"react-dadata__suggestion-note\"\n    }, \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0432\\u0430\\u0440\\u0438\\u0430\\u043D\\u0442 \\u0438\\u043B\\u0438 \\u043F\\u0440\\u043E\\u0434\\u043E\\u043B\\u0436\\u0438\\u0442\\u0435 \\u0432\\u0432\\u043E\\u0434\"), this.state.suggestions.map(function (suggestion, index) {\n      var suggestionClass = 'react-dadata__suggestion';\n\n      if (index == _this.state.suggestionIndex) {\n        suggestionClass += ' react-dadata__suggestion--current';\n      }\n\n      return React.createElement(\"div\", {\n        key: suggestion.value,\n        onMouseDown: _this.onSuggestionClick.bind(_this, index),\n        className: suggestionClass\n      }, React.createElement(Highlighter, {\n        highlightClassName: \"react-dadata--highlighted\",\n        autoEscape: true,\n        searchWords: _this.getHighlightWords(),\n        textToHighlight: suggestion.value\n      }));\n    })));\n  };\n\n  return ReactDadata;\n}(React.PureComponent);\n\nexports.ReactDadata = ReactDadata;","map":null,"metadata":{},"sourceType":"script"}